{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "clang++ - Build and debug active file",
            "type": "cppdbg",
            "request": "launch",

            // Set path to OMNet++ debug runner
            "program": "~/simulation/omnetpp-5.7.1/bin/opp_run_dbg",

            // Set working directory to scenario
            "cwd": "${workspaceFolder}/scenarios/artery",

            "environment": [
                { "name": "ARTERY_HOME", "value": "<path>" }, // TODO: Add paths
                { "name": "OMNETPP_HOME", "value": "<path>" },
                { "name": "OMNETPP_ROOT", "value": "<path>" },
                { "name": "SUMO_HOME", "value": "<path>" }
            ],
            "args": [
                // Paths to NED files
                "-n${ARTERY_HOME}/src/artery:${ARTERY_HOME}/src/traci:${ARTERY_HOME}/extern/veins/examples/veins:${ARTERY_HOME}/extern/veins/src/veins:${ARTERY_HOME}/extern/inet/src:${ARTERY_HOME}/extern/inet/examples:${ARTERY_HOME}/extern/inet/tutorials:${ARTERY_HOME}/extern/inet/showcases",

                // Libraries used for Artery
                "-l${ARTERY_HOME}/build/src/artery/envmod/libartery_envmod.so",
                "-l${ARTERY_HOME}/build/extern/libINET.so",
                "-l${ARTERY_HOME}/build/extern/libveins.so",
                "-l${ARTERY_HOME}/build/src/artery/libartery_core.so",
                "-l${ARTERY_HOME}/build/src/traci/libtraci.so",
                // "-l${ARTERY_HOME}/build/scenarios/highway-police/libartery_police.so",

                // .ini file to of the scenario
                "omnetpp.ini",

                // OMNet++ config to run
                "-cenvmod",
                // Run number
                "-r0",

                // OMNet++ interface can either be Qtenv or Cmdenv
                //"-uQtenv",
                "-uCmdenv",
            ],
            "stopAtEntry": false,
            "externalConsole": false,
            "MIMode": "gdb",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                },
                {
                    "description": "Enable all-exceptions",
                    "text": "catch throw",
                    "ignoreFailures": true
                }
            ],
            "preLaunchTask": "C/C++: clang++ build active file",
            "miDebuggerPath": "/usr/bin/gdb"
        }
    ]
}
